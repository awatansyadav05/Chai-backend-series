 The model we are using in this project ---eraser.io
- [Model link] (https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj)




DATABASE CONNECTION-->  the db is in the other continent,  
we learnt about the mongoose database 
MONGOOSE: Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It provides a structured way to interact with MongoDB, making it easier to model your data, enforce schemas, and perform CRUD (Create, Read, Update, Delete) operations.

{key features of Mongoose}
1.) Schema-based : Mongoose allows you to define a schema for your documents giving structure to your data.
2.) Middleware-support: Mongoose supports pre and post hooks (middleware) for operations like saving and updating documents. 

{//*Refer the index.js of db folder*//}


?? What is dotenv ??
It creates the .env file which can include the sensitive information like database connection and strings and API keys PORT decided in this file. 

the API key secret etc.. of cloudinary file written in .env file {refer}

?? What is cloudinary ??
Cloudinary is a cloud-based service that provides a comprehensive solution for managing images and videos. It allows developers to store, transform, and deliver media files efficiently. Here are the key aspects of Cloudinary

we have to create the cloudinary.js file for the importing the cloudinary.config()

--------------------------------next we created the models-------------------
we created Schema : {schema is blueprint which defines the data in a database}
it also based on CRUD operations.
-->user model
--> subscription model {refer model.js}
--> video model {}

---------------------------------next we created the contollers------------------
refer for the logic building and context {user.contoller.js}



---------------Middleware----------
multer - should be install and the it is used in the primarly uploads files in nodejs applications. 
1.)File Uploads: Multer facilitates the uploading of files from client to server, handling the parsing of file data in requests.

2.)Storage Options: It provides various storage options, including:

3.)Memory Storage: Stores files in memory as Buffer objects.
4.)Disk Storage: Saves files directly to disk, allowing for custom file naming and directory structure.
5.)File Filtering: Multer allows you to filter files based on criteria (e.g., file type), enabling you to restrict uploads to specific formats.

6.)Limits: You can set limits on file size and the number of files uploaded, enhancing security and resource management.

POSTMAN--> Postman is a popular API testing and development tool that allows developers to design, test, and document APIs. It provides a user-friendly interface for making HTTP requests and receiving responses, which is especially useful for backend and frontend developers when working with RESTful APIs. 

[
  when the user register code written move to the postman for API testing 
  1.) create Collections
  for the register, login and logout
  2.) NOTE--> one for saving the time like for typing the body req on must save time for creating the {{server}} in the Environment
  {{server}}== http://localhost:8000/api/v1
]

Lecture 16: Get to know about the access token and refresh token {already written in contoller.js}  


lecture 17: [
  majority controllers how can we write ----> more controllers
  ~learned to created models and created the subscription model from which the user is subscribing to the channel
  
  ~PRODUCTION_LEVEL_TIP ::  ensure you have created contoller file another for different tings like if the user wants to upload the profilephto then he must only upload profilephto else he have to fetch the user page full. 
]

Lect-18: { SUBSCRIPTION MODEL
  we have to count the number of subscriber per channel, so we will create the documents and as per the model the document--counting document means the counting of channel 

  so according to video
  we have the subscriber and channel 
  user -> a,b,c,d,e
  channel -> CAC, HCC, FCC 
  so we will have to count the number of subscriber subscribing the channel so we will count the number of documents we created. 

  But we have to count the  number of channel subscribing by user 'c' so what we will we do????
  so we will just count the [subscribers se channel ke list niakl ke laao]

}

lecture-19: {AGGREGRATION AND PIPELINES}
AGGREGRATION--> pipelines are the different stages that process our documents.
--> An aggregration pipelines can return results for groups of documents, for e.g. return the total ,average, maximum and minimum values


syntax--> db.users.aggregate([
  {

  },
  {

  }
])

$lookup: is used to combine data from two different Collections, like joining two tables in SQL.  
from: the other collection you want to get data from ...
localfield: the field in the current collection that you want to match
foreignfield: the field in the other collection that should match with localfield
as: where the combine data should be store. 

$match: is used to filter documents based on specific conditions.
it is same as WHERE in SQL.

$addFields: is used to add new fields to the documents or modify existing ones, it is used to create additional fields 

$project: stage used to include, exclude or reshape fields in documents that are passed through pipeline
/*/refer to the contoller file/*/

Lecture-20 {SUB PIPELINES}
sub-pipelines are nested pipelines used within certain aggregation stages.

